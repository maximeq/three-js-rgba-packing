!(function(e, t) {
"object" == typeof exports && "undefined" != typeof module
? (module.exports = t(require("three-full")))
: "function" == typeof define && define.amd
? define(["three-full"], t)
: (e.THREERGBAPacking = t(e.THREE));
})(this, function(e) {
"use strict";
e = e && e.hasOwnProperty("default") ? e.default : e;
var t = {
encodeUInt32: function(e, t) {
return (
((t = t || new Float32Array(4))[0] = (Math.trunc(e) % 256) / 255),
(t[1] = (Math.trunc(e / 256) % 256) / 255),
(t[2] = (Math.trunc(e / 256 / 256) % 256) / 255),
(t[3] = (Math.trunc(e / 256 / 256 / 256) % 256) / 255),
t
);
},
decodeUInt32: function(e) {
return (
Math.round(255 * e[0]) +
256 * Math.round(255 * e[1]) +
256 * Math.round(255 * e[2]) * 256 +
256 * Math.round(255 * e[3]) * 256 * 256
);
},
encodeUInt16: function(e, t) {
return (
((t = t || new Float32Array(2))[0] = (Math.trunc(e) % 256) / 255),
(t[1] = (Math.trunc(e / 256) % 256) / 255),
t
);
},
decodeUInt16: function(e) {
return Math.round(255 * e[0]) + 256 * Math.round(255 * e[1]);
},
encodeUnitFloat32: function(e, t) {
((t = t || new Float32Array([0, 0, 0, 0]))[0] = 1 * e),
(t[1] = 255 * e),
(t[2] = 65025 * e),
(t[3] = 16581375 * e);
for (var n = 0; n < 4; ++n) t[n] -= Math.floor(t[n]);
return (t[0] -= t[1] / 255), (t[1] -= t[2] / 255), (t[2] -= t[3] / 255), t;
},
decodeUnitFloat32: function(e) {
return e[0] + e[1] / 255 + e[2] / 65025 + e[3] / 16581375;
},
glslEncodeUnitFloat32: [
"vec4 encodeUnitFloat32 (float f) {",
"    vec4 rgba = vec4(1.,255.,65025.,16581375.) * f;",
"    rgba = fract(rgba);",
"    rgba -= rgba.yzww * vec2(1./255., 0.).xxxy;",
"    return rgba;",
"}"
].join("\n"),
glslDecodeUnitFloat32: [
"float decodeUnitFloat32 (vec4 rgba) {",
"    return dot(rgba, vec4(1.,1./255.,1./65025.,1./16581375.));",
"}"
].join("\n"),
glslEncodeUInt32: [
"vec4 encodeUInt32(int value) {",
"   vec4 encodeFactors = 1.0 / 256. / vec4(1., 256., 65536., 16777216.);",
"   vec4 rgba = fract(float(value) * encodeFactors);",
"   rgba.yzw -= rgba.xyz / 256.;",
"   return rgba * 256. / 255.;",
"}"
].join("\n"),
glslDecodeUInt32: [
"int decodeUInt32(vec4 value) {",
"   ivec4 decodeFactors = ivec4(1, 256, 65536, 16777216);",
"   ivec4 v = ivec4(255. * value);",
"   return decodeFactors.x * v.x + decodeFactors.y * v.y + decodeFactors.z * v.z  + decodeFactors.w * v.w;",
"}"
].join("\n"),
glslEncodeUInt16: [
"vec2 encodeUInt16(int value) {",
"    vec2 encodeVec = vec2(1.0 / 256., 1.0 / 65536.);    vec2 result = fract(float(value) * encodeVec);",
"    result.y -= result.x / 256.;",
"    return 256. * result / 255.;",
"}"
].join("\n"),
glslDecodeUInt16: [
"int decodeUInt16(vec2 value) {",
"   vec2 decodeVec = vec2(255., 256. * 255.);",
"   return int(dot(value, decodeVec));",
"}"
].join("\n")
};
return (e.RGBAPacking = t), t;
});
